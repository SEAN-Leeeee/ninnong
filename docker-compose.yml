services:
  mysql:
    image: mysql:8.0
    container_name: mysql-ninnong
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-ninnong
    ports:
      - "8080:8080"
    environment:
      - JWT_ISSUER=${JWT_ISSUER}
      - JWT_ACCESS_TOKEN_KEY=${JWT_ACCESS_TOKEN_KEY}
      - JWT_REFRESH_TOKEN_KEY=${JWT_REFRESH_TOKEN_KEY}
      - JWT_ACCESS_TOKEN_TTL=${JWT_ACCESS_TOKEN_TTL}
      - JWT_REFRESH_TOKEN_TTL=${JWT_REFRESH_TOKEN_TTL}
      - DB_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - mysql

  frontend-builder:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vue-builder
    command: sh -c "npm install && npm run build"
    volumes:
      - ./frontend/dist:/frontend/dist
    # 개발 환경에서는 사용 안 함

  nginx:
    image: nginx:latest
    container_name: vue-nginx
    ports:
      - "80:80"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend-builder
      - app
    # 배포용. 개발 중엔 사용 안 함

volumes:
  mysql_data:
